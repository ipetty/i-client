package net.ipetty.android.core.util;

import java.io.File;
import java.io.UnsupportedEncodingException;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.Uri;
import android.provider.MediaStore;
import android.provider.Settings.Secure;
import android.support.v4.app.Fragment;
import android.telephony.TelephonyManager;

public class DeviceUtils {
	private static final String PREFS_FILE = "device_id.xml";  
    private static final String PREFS_DEVICE_ID = "device_id";  
    private static UUID uuid;  
    
    /** 
     * http://luhuajcdd.iteye.com/blog/1608746
     * Returns a unique UUID for the current android device.  As with all UUIDs, this unique ID is "very highly likely" 
     * to be unique across all Android devices.  Much more so than ANDROID_ID is. 
     * 
     * The UUID is generated by using ANDROID_ID as the base key if appropriate, falling back on 
     * TelephonyManager.getDeviceID() if ANDROID_ID is known to be incorrect, and finally falling back 
     * on a random UUID that's persisted to SharedPreferences if getDeviceID() does not return a 
     * usable value. 
     * 
     * In some rare circumstances, this ID may change.  In particular, if the device is factory reset a new device ID 
     * may be generated.  In addition, if a user upgrades their phone from certain buggy implementations of Android 2.2 
     * to a newer, non-buggy version of Android, the device ID may change.  Or, if a user uninstalls your app on 
     * a device that has neither a proper Android ID nor a Device ID, this ID may change on reinstallation. 
     * 
     * Note that if the code falls back on using TelephonyManager.getDeviceId(), the resulting ID will NOT 
     * change after a factory reset.  Something to be aware of. 
     * 
     * Works around a bug in Android 2.2 for many devices when using ANDROID_ID directly. 
     * 
     * @see http://code.google.com/p/android/issues/detail?id=10603 
     * 
     * @return a UUID that may be used to uniquely identify your device for most purposes. 
     */  
    public static synchronized UUID getDeviceUUID(Context context) {  
        if( uuid ==null ) {  

                if( uuid == null) {  
                    final SharedPreferences prefs = context.getSharedPreferences( PREFS_FILE, 0);  
                    final String id = prefs.getString(PREFS_DEVICE_ID, null );  
                    if (id != null) {  
                        // Use the ids previously computed and stored in the prefs file  
                        uuid = UUID.fromString(id);  
                    } else {  
                        final String androidId = Secure.getString(context.getContentResolver(), Secure.ANDROID_ID);  
                        // Use the Android ID unless it's broken, in which case fallback on deviceId,  
                        // unless it's not available, then fallback on a random number which we store  
                        // to a prefs file  
                        try {  
                            if (!"9774d56d682e549c".equals(androidId)) {  
                                uuid = UUID.nameUUIDFromBytes(androidId.getBytes("utf8"));  
                            } else {  
                                final String deviceId = ((TelephonyManager) context.getSystemService( Context.TELEPHONY_SERVICE )).getDeviceId();  
                                uuid = deviceId!=null ? UUID.nameUUIDFromBytes(deviceId.getBytes("utf8")) : UUID.randomUUID();  
                            }  
                        } catch (UnsupportedEncodingException e) {  
                            throw new RuntimeException(e);  
                        }  
                        // Write the value out to the prefs file  
                        prefs.edit().putString(PREFS_DEVICE_ID, uuid.toString() ).commit();  
                    }  
                }  
        }
        
        return uuid;
        
    }  

	public static final int REQUEST_CODE_PICK_IMAGE = 50;
	public static final int REQUEST_CODE_TAKE_IMAGE = 51;

	public static void chooserSysPics(Context context) {
		if (context == null) {
			return;
		}
		Intent localIntent = getChooserSysPicsIntent();
		((Activity) context).startActivityForResult(localIntent, REQUEST_CODE_PICK_IMAGE);
	}

	public static void chooserSysPics(Fragment fragment) {
		if (fragment.getActivity() == null) {
			return;
		}
		Intent localIntent = getChooserSysPicsIntent();
		fragment.startActivityForResult(localIntent, REQUEST_CODE_PICK_IMAGE);
	}

	public static Intent getChooserSysPicsIntent() {
		Intent localIntent = new Intent();
		localIntent.setData(MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
		localIntent.setType("image/*");
		localIntent.setAction("android.intent.action.GET_CONTENT");
		return localIntent;
	}

	// takePicture
	public static void takePicture(Context context) {
		takePicture(context, null, null);
	}

	public static void takePicture(Context context, String path, String filename) {
		if (context == null) {
			return;
		}
		Intent intent = getPhotoIntent(path, filename);
		((Activity) context).startActivityForResult(intent, REQUEST_CODE_TAKE_IMAGE);

	}

	public static void takePicture(Fragment fragment) {
		takePicture(fragment, null, null);
	}

	public static void takePicture(Fragment fragment, String path, String filename) {
		if (fragment.getActivity() == null) {
			return;
		}
		Intent intent = getPhotoIntent(path, filename);
		fragment.startActivityForResult(intent, REQUEST_CODE_TAKE_IMAGE);
	}

	public static Intent getPhotoIntent(String path, String filename) {
		if (StringUtils.isEmpty(path)) {
			path = PathUtils.getCarmerDir();
		}

		if (StringUtils.isEmpty(filename)) {
			filename = System.currentTimeMillis() + ".jpg";
		}
		File file = new File(path, filename);
		Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
		intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(file));
		return intent;
	}

}
